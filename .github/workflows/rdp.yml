name: RDP

on:
  workflow_dispatch:

jobs:
  setup-rdp:
    name: Setup RDP and upload creds (Windows)
    runs-on: windows-latest
    timeout-minutes: 3600
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = 'https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi'
          $installerPath = Join-Path $env:TEMP 'tailscale.msi'
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process -FilePath msiexec.exe -ArgumentList "/i `"$installerPath`" /quiet /norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Configure RDP & Firewall (enable RDP)
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'SecurityLayer' -Value 0 -Force

          # firewall rule
          netsh advfirewall firewall delete rule name='RDP-GHA' -ErrorAction SilentlyContinue
          netsh advfirewall firewall add rule name='RDP-GHA' dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create local RDP user with random secure password
        shell: pwsh
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          # generate a password (12 chars: upper, lower, digits, special)
          $Upper = [char[]](65..90)
          $Lower = [char[]](97..122)
          $Nums  = [char[]](48..57)
          $Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          $chars = @()
          $chars += $Upper | Get-Random -Count 3
          $chars += $Lower | Get-Random -Count 3
          $chars += $Nums  | Get-Random -Count 3
          $chars += $Special | Get-Random -Count 3
          $password = -join ($chars | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name 'RDP' -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name 'RDP' -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          } else {
            Set-LocalUser -Name 'RDP' -Password $securePass
          }
          Add-LocalGroupMember -Group 'Remote Desktop Users' -Member 'RDP' -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group 'Administrators' -Member 'RDP' -ErrorAction SilentlyContinue

          # Save credentials into workspace so upload-artifact can find them
          $outDir = Join-Path $env:GITHUB_WORKSPACE 'gha-rdp'
          New-Item -Path $outDir -ItemType Directory -Force | Out-Null
          $credsFile = Join-Path $outDir 'rdp-creds.txt'
          "USER: RDP" | Out-File -FilePath $credsFile -Encoding utf8
          "PASSWORD: $password" | Out-File -FilePath $credsFile -Encoding utf8 -Append
          Write-Host "Saved creds to $credsFile"

      - name: Bring up Tailscale and capture IP
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          $host = "gh-runner-$env:GITHUB_RUN_ID"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=$host --accept-routes || Write-Host "tailscale up returned non-zero"

          $tsIP = $null
          for ($i = 0; $i -lt 12; $i++) {
            Start-Sleep -Seconds 5
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            if ($tsIP) { break }
          }

          if (-not $tsIP) { Write-Error "Tailscale IP was not assigned"; exit 1 }

          $outDir = Join-Path $env:GITHUB_WORKSPACE 'gha-rdp'
          $ipFile = Join-Path $outDir 'tailscale-ip.txt'
          $tsIP | Out-File -FilePath $ipFile -Encoding utf8

          $rdpFile = Join-Path $outDir 'gh-runner.rdp'
          $rdpContent = @"
full address:s:$host
username:s:RDP
prompt for credentials:i:1
authentication level:i:0
"@
          $rdpContent | Out-File -FilePath $rdpFile -Encoding ascii

          Write-Host "Saved IP and .rdp to $outDir"

      - name: Upload RDP artifact (creds + .rdp + ip)
        uses: actions/upload-artifact@v4
        with:
          name: rdp-config
          path: gha-rdp

  use-rdp:
    name: Download artifact and show creds (Ubuntu)
    runs-on: ubuntu-latest
    needs: setup-rdp
    steps:
      - name: Download artifact created by setup-rdp
        uses: actions/download-artifact@v4
        with:
          name: rdp-config
          path: ./rdp

      - name: List downloaded files
        shell: bash
        run: |
          echo "Files in ./rdp:"
          ls -la ./rdp || true

      - name: Show credentials (be careful â€” this logs the password)
        shell: bash
        run: |
          echo "==== RDP CREDENTIALS ===="
          cat ./rdp/rdp-creds.txt || true
          echo "==== TAILSCALE IP ===="
          cat ./rdp/tailscale-ip.txt || true
          echo "==== .RDP FILE CONTENT ===="
          cat ./rdp/gh-runner.rdp || true
