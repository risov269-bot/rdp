name: Persistent RDP Session

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Session duration in minutes (1-360)'
        required: true
        default: '60'
        type: string

jobs:
  persistent-rdp:
    name: Setup and Maintain RDP Session
    runs-on: self-hosted  # Uses your own persistent machine
    timeout-minutes: 360
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          Write-Host "Configuring RDP settings..."
          
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          
          # Disable Network Level Authentication (for easier connection)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Configure Windows Firewall for RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale" > $null 2>&1
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart Remote Desktop service
          Restart-Service -Name TermService -Force
          Write-Host "‚úì RDP configured successfully"

      - name: Create/Update RDP User
        shell: powershell
        run: |
          Write-Host "Setting up RDP user..."
          
          # Generate secure password
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          
          # Ensure password meets complexity requirements
          $passwordChars = @()
          $passwordChars += $charSet.Upper | Get-Random -Count 4
          $passwordChars += $charSet.Lower | Get-Random -Count 4
          $passwordChars += $charSet.Number | Get-Random -Count 4
          $passwordChars += $charSet.Special | Get-Random -Count 4
          $password = -join ($passwordChars | Sort-Object { Get-Random })
          
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          # Create or update user
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
              Set-LocalUser -Name "RDP" -Password $securePass
              Write-Host "‚úì Updated existing RDP user"
          } else {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
              Write-Host "‚úì Created new RDP user"
          }
          
          # Add to required groups
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue
          
          # Save credentials to environment
          echo "RDP_USERNAME=RDP" >> $env:GITHUB_ENV
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          
          Write-Host "‚úì RDP user ready"

      - name: Install/Update Tailscale
        shell: powershell
        run: |
          Write-Host "Installing/configuring Tailscale..."
          
          # Check if Tailscale is already installed
          $tailscalePath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (Test-Path $tailscalePath) {
              Write-Host "‚úì Tailscale already installed"
          } else {
              Write-Host "Downloading and installing Tailscale..."
              $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
              $installerPath = "$env:TEMP\tailscale.msi"
              
              Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
              Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
              Remove-Item $installerPath -Force
              Write-Host "‚úì Tailscale installed"
          }

      - name: Establish Tailscale Connection
        shell: powershell
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          Write-Host "Connecting to Tailscale..."
          
          # Generate unique hostname
          $hostname = "gh-rdp-runner-${{ github.run_id }}"
          $tailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          
          # Disconnect if already connected
          & $tailscaleExe down > $null 2>&1
          
          # Connect with auth key
          & $tailscaleExe up --authkey="$env:TAILSCALE_AUTH_KEY" --hostname="$hostname" --accept-routes
          
          # Wait for IP assignment
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
              Start-Sleep -Seconds 3
              $tsIP = & $tailscaleExe ip -4 2>$null
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Failed to get Tailscale IP after $retries attempts"
              exit 1
          }
          
          $tsIP = $tsIP.Trim()
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "‚úì Connected to Tailscale - IP: $tsIP"

      - name: Verify RDP Accessibility
        shell: powershell
        run: |
          Write-Host "Testing RDP connectivity..."
          
          # Test TCP connection to RDP port
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          
          if (-not $testResult.TcpTestSucceeded) {
              Write-Warning "TCP test failed - this might be normal if connecting from outside"
          } else {
              Write-Host "‚úì TCP connectivity to RDP port successful"
          }

      - name: Display Connection Information
        shell: powershell
        run: |
          Write-Host "`n" + "="*50
          Write-Host "         RDP SESSION READY"
          Write-Host "="*50
          Write-Host "üíª Address: $($env:TAILSCALE_IP)"
          Write-Host "üë§ Username: $($env:RDP_USERNAME)"
          Write-Host "üîë Password: $($env:RDP_PASSWORD)"
          Write-Host "‚è∞ Session Duration: ${{ github.event.inputs.duration }} minutes"
          Write-Host "üîÑ Workflow Run ID: ${{ github.run_id }}"
          Write-Host "="*50
          Write-Host ""

      - name: Maintain Session
        shell: powershell
        run: |
          Write-Host "Starting session maintenance loop..."
          
          # Calculate end time
          $duration = [int]${{ github.event.inputs.duration }}
          $endTime = (Get-Date).AddMinutes($duration)
          
          Write-Host "Session will remain active until: $endTime"
          
          # Keep session alive
          while ((Get-Date) -lt $endTime) {
              $remaining = [math]::Round(($endTime - (Get-Date)).TotalMinutes)
              Write-Host "[$(Get-Date.ToString('HH:mm:ss'))] Session active - $remaining minutes remaining"
              Start-Sleep -Seconds 60
          }
          
          Write-Host "‚úÖ Session completed - duration of $duration minutes reached"
